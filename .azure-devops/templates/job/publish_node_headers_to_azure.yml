# Publish Node.js headers and libraries to an Azure storage.
# Uses artifacts produced by a release build of Electron.

parameters:
  buildId: ''  # An id of an Electron release build. An empty string stands for the current build.
  container: headers
  dryRun: false  # Do everything except the actual uploading.
  storage: dropsskypeelectron
  _artifactsToDownload:
  - 'electron windows arm64'
  - 'electron windows x64'
  - 'electron windows x86'
  _platform: windows
  _stagingDirectory: $(Build.ArtifactStagingDirectory)
  _workingDirectory: $(Build.BinariesDirectory)

jobs:
- job: publish_node_headers_to_azure
  displayName: Publish Node.js headers to Azure
  pool:
    vmImage: vs2017-win2016
  steps:
  - template: ../action/setup_agent.yml
    parameters:
      platform: ${{ parameters._platform }}

  - template: ../action/checkout_self.yml

  - ${{ each artifactName in parameters._artifactsToDownload }}:
    - task: DownloadPipelineArtifact@0
      displayName: Download ${{ artifactName }}
      inputs:
        pipelineId: ${{ parameters.buildId }}
        artifactName: ${{ artifactName }}
        targetPath: ${{ parameters._workingDirectory }}/${{ artifactName }}

  # We need to pass a version string to the upload step.
  - template: ../action/set_variable_from_file.yml
    parameters:
      filePath: ${{ parameters._workingDirectory }}/electron windows x64/ELECTRON_VERSION
      name: Electron.Local.Version

  # Create a files' structure ready to be published.
  - task: PythonScript@0
    displayName: Prepare files for upload
    inputs:
      scriptSource: filePath
      scriptPath: scripts/create_publishing_layout.py
      arguments: >
        --config configs/publishing_layout/node_headers_azure.layout.json
        --data version=$(Electron.Local.Version)
        --input-dir ${{ parameters._workingDirectory }}
        --output-dir ${{ parameters._stagingDirectory }}
      failOnStderr: true

  - template: ../action/upload_to_azure.yml
    parameters:
      blobPrefix: 'v$(Electron.Local.Version)'
      ${{ if eq(parameters.dryRun, true) }}:
        condition: false
      containerName: ${{ parameters.container }}
      sourcePath: ${{ parameters._stagingDirectory }}/*
      storage: ${{ parameters.storage }}
