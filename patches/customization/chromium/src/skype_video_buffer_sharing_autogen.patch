From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Milan Burda <miburda@microsoft.com>
Date: Wed, 10 Oct 2018 18:55:46 +0000
Subject: build: generated by gpu/command_buffer/build_gles2_cmd_buffer.py

Microsoft patch

diff --git a/gpu/GLES2/gl2chromium_autogen.h b/gpu/GLES2/gl2chromium_autogen.h
index ab465a6a4f8cee8c36599417010fc1734148f887..801cab337c7da3fd965e23532b8d3df6574226dc 100644
--- a/gpu/GLES2/gl2chromium_autogen.h
+++ b/gpu/GLES2/gl2chromium_autogen.h
@@ -415,5 +415,7 @@
 #define glBlendFuncSeparateiOES GLES2_GET_FUN(BlendFuncSeparateiOES)
 #define glColorMaskiOES GLES2_GET_FUN(ColorMaskiOES)
 #define glIsEnablediOES GLES2_GET_FUN(IsEnablediOES)
+#define glUpdateTextureSKYPE GLES2_GET_FUN(UpdateTextureSKYPE)
+#define glReleaseBufferSKYPE GLES2_GET_FUN(ReleaseBufferSKYPE)
 
 #endif  // GPU_GLES2_GL2CHROMIUM_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_c_lib_autogen.h b/gpu/command_buffer/client/gles2_c_lib_autogen.h
index dfe2d8512a2f161b8ac03fd5b4bb71f879b97b03..4b9403f1b352856a262525ed5c736fc8cdcd4b63 100644
--- a/gpu/command_buffer/client/gles2_c_lib_autogen.h
+++ b/gpu/command_buffer/client/gles2_c_lib_autogen.h
@@ -1872,6 +1872,19 @@ void GL_APIENTRY GLES2ColorMaskiOES(GLuint buf,
 GLboolean GL_APIENTRY GLES2IsEnablediOES(GLenum target, GLuint index) {
   return gles2::GetGLContext()->IsEnablediOES(target, index);
 }
+void GL_APIENTRY GLES2UpdateTextureSKYPE(GLenum target,
+                                         GLsizei width,
+                                         GLsizei height,
+                                         GLenum format,
+                                         GLenum type,
+                                         const char* buffer_name,
+                                         GLuint buffer_offset) {
+  gles2::GetGLContext()->UpdateTextureSKYPE(target, width, height, format, type,
+                                            buffer_name, buffer_offset);
+}
+void GL_APIENTRY GLES2ReleaseBufferSKYPE(const char* name) {
+  gles2::GetGLContext()->ReleaseBufferSKYPE(name);
+}
 
 namespace gles2 {
 
@@ -3352,6 +3365,14 @@ extern const NameToFunc g_gles2_function_table[] = {
         "glIsEnablediOES",
         reinterpret_cast<GLES2FunctionPointer>(glIsEnablediOES),
     },
+    {
+        "glUpdateTextureSKYPE",
+        reinterpret_cast<GLES2FunctionPointer>(glUpdateTextureSKYPE),
+    },
+    {
+        "glReleaseBufferSKYPE",
+        reinterpret_cast<GLES2FunctionPointer>(glReleaseBufferSKYPE),
+    },
     {
         nullptr,
         nullptr,
diff --git a/gpu/command_buffer/client/gles2_cmd_helper_autogen.h b/gpu/command_buffer/client/gles2_cmd_helper_autogen.h
index efe2fe42a7b598d8d2a4a21b6685f9e6a6f202cc..766267a19eaa07900b0822ecae3f57b316979262 100644
--- a/gpu/command_buffer/client/gles2_cmd_helper_autogen.h
+++ b/gpu/command_buffer/client/gles2_cmd_helper_autogen.h
@@ -3495,4 +3495,27 @@ void IsEnablediOES(GLenum target,
   }
 }
 
+void UpdateTextureSKYPEBucket(GLenum target,
+                              GLsizei width,
+                              GLsizei height,
+                              GLenum format,
+                              GLenum type,
+                              uint32_t buffer_name_bucket_id,
+                              GLuint buffer_offset) {
+  gles2::cmds::UpdateTextureSKYPEBucket* c =
+      GetCmdSpace<gles2::cmds::UpdateTextureSKYPEBucket>();
+  if (c) {
+    c->Init(target, width, height, format, type, buffer_name_bucket_id,
+            buffer_offset);
+  }
+}
+
+void ReleaseBufferSKYPEBucket(uint32_t name_bucket_id) {
+  gles2::cmds::ReleaseBufferSKYPEBucket* c =
+      GetCmdSpace<gles2::cmds::ReleaseBufferSKYPEBucket>();
+  if (c) {
+    c->Init(name_bucket_id);
+  }
+}
+
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_CMD_HELPER_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_implementation_autogen.h b/gpu/command_buffer/client/gles2_implementation_autogen.h
index 2ce5be504ca9957ff4e78170680e8bcf28328102..e2a1b9d3d2a1fce9e714cba94f95e4bddc88fea0 100644
--- a/gpu/command_buffer/client/gles2_implementation_autogen.h
+++ b/gpu/command_buffer/client/gles2_implementation_autogen.h
@@ -1319,4 +1319,14 @@ void ColorMaskiOES(GLuint buf,
 
 GLboolean IsEnablediOES(GLenum target, GLuint index) override;
 
+void UpdateTextureSKYPE(GLenum target,
+                        GLsizei width,
+                        GLsizei height,
+                        GLenum format,
+                        GLenum type,
+                        const char* buffer_name,
+                        GLuint buffer_offset) override;
+
+void ReleaseBufferSKYPE(const char* name) override;
+
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_IMPLEMENTATION_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_interface_autogen.h b/gpu/command_buffer/client/gles2_interface_autogen.h
index a6cfcf3b536f11da408974219d4f8c5764e902e1..abbe17123c7647d30d64b9ea491879b25b6acddc 100644
--- a/gpu/command_buffer/client/gles2_interface_autogen.h
+++ b/gpu/command_buffer/client/gles2_interface_autogen.h
@@ -986,4 +986,12 @@ virtual void ColorMaskiOES(GLuint buf,
                            GLboolean b,
                            GLboolean a) = 0;
 virtual GLboolean IsEnablediOES(GLenum target, GLuint index) = 0;
+virtual void UpdateTextureSKYPE(GLenum target,
+                                GLsizei width,
+                                GLsizei height,
+                                GLenum format,
+                                GLenum type,
+                                const char* buffer_name,
+                                GLuint buffer_offset) = 0;
+virtual void ReleaseBufferSKYPE(const char* name) = 0;
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_INTERFACE_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_interface_stub_autogen.h b/gpu/command_buffer/client/gles2_interface_stub_autogen.h
index 0af83a4f52b9e68292f5e8788c820be11bff7afc..c5ccdc9a06f8a21434da7f6ad4dab9c9295dcc94 100644
--- a/gpu/command_buffer/client/gles2_interface_stub_autogen.h
+++ b/gpu/command_buffer/client/gles2_interface_stub_autogen.h
@@ -956,4 +956,12 @@ void ColorMaskiOES(GLuint buf,
                    GLboolean b,
                    GLboolean a) override;
 GLboolean IsEnablediOES(GLenum target, GLuint index) override;
+void UpdateTextureSKYPE(GLenum target,
+                        GLsizei width,
+                        GLsizei height,
+                        GLenum format,
+                        GLenum type,
+                        const char* buffer_name,
+                        GLuint buffer_offset) override;
+void ReleaseBufferSKYPE(const char* name) override;
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_INTERFACE_STUB_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h b/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
index 2c8542ba0f0c7d1fb43ec1a5dd079ad88cfa161c..0baa6153a8b9fb9e9c69abe173dbfc5a6f34d5ec 100644
--- a/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
+++ b/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
@@ -1278,4 +1278,12 @@ GLboolean GLES2InterfaceStub::IsEnablediOES(GLenum /* target */,
                                             GLuint /* index */) {
   return 0;
 }
+void GLES2InterfaceStub::UpdateTextureSKYPE(GLenum /* target */,
+                                            GLsizei /* width */,
+                                            GLsizei /* height */,
+                                            GLenum /* format */,
+                                            GLenum /* type */,
+                                            const char* /* buffer_name */,
+                                            GLuint /* buffer_offset */) {}
+void GLES2InterfaceStub::ReleaseBufferSKYPE(const char* /* name */) {}
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_INTERFACE_STUB_IMPL_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_trace_implementation_autogen.h b/gpu/command_buffer/client/gles2_trace_implementation_autogen.h
index d3d3e45c124df417910f91459b111bb722d19d70..2d3a0dd7b116b360a96eaee3ff02c83d8bf113c6 100644
--- a/gpu/command_buffer/client/gles2_trace_implementation_autogen.h
+++ b/gpu/command_buffer/client/gles2_trace_implementation_autogen.h
@@ -956,4 +956,12 @@ void ColorMaskiOES(GLuint buf,
                    GLboolean b,
                    GLboolean a) override;
 GLboolean IsEnablediOES(GLenum target, GLuint index) override;
+void UpdateTextureSKYPE(GLenum target,
+                        GLsizei width,
+                        GLsizei height,
+                        GLenum format,
+                        GLenum type,
+                        const char* buffer_name,
+                        GLuint buffer_offset) override;
+void ReleaseBufferSKYPE(const char* name) override;
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_TRACE_IMPLEMENTATION_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h b/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
index bc4518d66f766fd1623213fdef4f8c08dfbe2770..b0d33138727fbe5466dd7931660a79681bbc2a66 100644
--- a/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
+++ b/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
@@ -2710,4 +2710,21 @@ GLboolean GLES2TraceImplementation::IsEnablediOES(GLenum target, GLuint index) {
   return gl_->IsEnablediOES(target, index);
 }
 
+void GLES2TraceImplementation::UpdateTextureSKYPE(GLenum target,
+                                                  GLsizei width,
+                                                  GLsizei height,
+                                                  GLenum format,
+                                                  GLenum type,
+                                                  const char* buffer_name,
+                                                  GLuint buffer_offset) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::UpdateTextureSKYPE");
+  gl_->UpdateTextureSKYPE(target, width, height, format, type, buffer_name,
+                          buffer_offset);
+}
+
+void GLES2TraceImplementation::ReleaseBufferSKYPE(const char* name) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::ReleaseBufferSKYPE");
+  gl_->ReleaseBufferSKYPE(name);
+}
+
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_TRACE_IMPLEMENTATION_IMPL_AUTOGEN_H_
diff --git a/gpu/command_buffer/common/gles2_cmd_format_autogen.h b/gpu/command_buffer/common/gles2_cmd_format_autogen.h
index 2fc6747211dad1d92f70e114a578b8b20ebb0c63..29fed356f7a2c7910a334c8290646e18efebdc3d 100644
--- a/gpu/command_buffer/common/gles2_cmd_format_autogen.h
+++ b/gpu/command_buffer/common/gles2_cmd_format_autogen.h
@@ -17195,4 +17195,109 @@ static_assert(offsetof(IsEnablediOES, result_shm_id) == 12,
 static_assert(offsetof(IsEnablediOES, result_shm_offset) == 16,
               "offset of IsEnablediOES result_shm_offset should be 16");
 
+struct UpdateTextureSKYPEBucket {
+  typedef UpdateTextureSKYPEBucket ValueType;
+  static const CommandId kCmdId = kUpdateTextureSKYPEBucket;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(GLenum _target,
+            GLsizei _width,
+            GLsizei _height,
+            GLenum _format,
+            GLenum _type,
+            uint32_t _buffer_name_bucket_id,
+            GLuint _buffer_offset) {
+    SetHeader();
+    target = _target;
+    width = _width;
+    height = _height;
+    format = _format;
+    type = _type;
+    buffer_name_bucket_id = _buffer_name_bucket_id;
+    buffer_offset = _buffer_offset;
+  }
+
+  void* Set(void* cmd,
+            GLenum _target,
+            GLsizei _width,
+            GLsizei _height,
+            GLenum _format,
+            GLenum _type,
+            uint32_t _buffer_name_bucket_id,
+            GLuint _buffer_offset) {
+    static_cast<ValueType*>(cmd)->Init(_target, _width, _height, _format, _type,
+                                       _buffer_name_bucket_id, _buffer_offset);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  gpu::CommandHeader header;
+  uint32_t target;
+  int32_t width;
+  int32_t height;
+  uint32_t format;
+  uint32_t type;
+  uint32_t buffer_name_bucket_id;
+  uint32_t buffer_offset;
+};
+
+static_assert(sizeof(UpdateTextureSKYPEBucket) == 32,
+              "size of UpdateTextureSKYPEBucket should be 32");
+static_assert(offsetof(UpdateTextureSKYPEBucket, header) == 0,
+              "offset of UpdateTextureSKYPEBucket header should be 0");
+static_assert(offsetof(UpdateTextureSKYPEBucket, target) == 4,
+              "offset of UpdateTextureSKYPEBucket target should be 4");
+static_assert(offsetof(UpdateTextureSKYPEBucket, width) == 8,
+              "offset of UpdateTextureSKYPEBucket width should be 8");
+static_assert(offsetof(UpdateTextureSKYPEBucket, height) == 12,
+              "offset of UpdateTextureSKYPEBucket height should be 12");
+static_assert(offsetof(UpdateTextureSKYPEBucket, format) == 16,
+              "offset of UpdateTextureSKYPEBucket format should be 16");
+static_assert(offsetof(UpdateTextureSKYPEBucket, type) == 20,
+              "offset of UpdateTextureSKYPEBucket type should be 20");
+static_assert(
+    offsetof(UpdateTextureSKYPEBucket, buffer_name_bucket_id) == 24,
+    "offset of UpdateTextureSKYPEBucket buffer_name_bucket_id should be 24");
+static_assert(offsetof(UpdateTextureSKYPEBucket, buffer_offset) == 28,
+              "offset of UpdateTextureSKYPEBucket buffer_offset should be 28");
+
+struct ReleaseBufferSKYPEBucket {
+  typedef ReleaseBufferSKYPEBucket ValueType;
+  static const CommandId kCmdId = kReleaseBufferSKYPEBucket;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(uint32_t _name_bucket_id) {
+    SetHeader();
+    name_bucket_id = _name_bucket_id;
+  }
+
+  void* Set(void* cmd, uint32_t _name_bucket_id) {
+    static_cast<ValueType*>(cmd)->Init(_name_bucket_id);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  gpu::CommandHeader header;
+  uint32_t name_bucket_id;
+};
+
+static_assert(sizeof(ReleaseBufferSKYPEBucket) == 8,
+              "size of ReleaseBufferSKYPEBucket should be 8");
+static_assert(offsetof(ReleaseBufferSKYPEBucket, header) == 0,
+              "offset of ReleaseBufferSKYPEBucket header should be 0");
+static_assert(offsetof(ReleaseBufferSKYPEBucket, name_bucket_id) == 4,
+              "offset of ReleaseBufferSKYPEBucket name_bucket_id should be 4");
+
 #endif  // GPU_COMMAND_BUFFER_COMMON_GLES2_CMD_FORMAT_AUTOGEN_H_
diff --git a/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h b/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
index a07cf3607ae6a20816c5ba34d6f3e70452bce4b8..568f2387319f82882a09264377a66399ab3dc2e3 100644
--- a/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
+++ b/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
@@ -5685,4 +5685,35 @@ TEST_F(GLES2FormatTest, IsEnablediOES) {
   CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
 }
 
+TEST_F(GLES2FormatTest, UpdateTextureSKYPEBucket) {
+  cmds::UpdateTextureSKYPEBucket& cmd =
+      *GetBufferAs<cmds::UpdateTextureSKYPEBucket>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<GLenum>(11),
+                           static_cast<GLsizei>(12), static_cast<GLsizei>(13),
+                           static_cast<GLenum>(14), static_cast<GLenum>(15),
+                           static_cast<uint32_t>(16), static_cast<GLuint>(17));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::UpdateTextureSKYPEBucket::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<GLenum>(11), cmd.target);
+  EXPECT_EQ(static_cast<GLsizei>(12), cmd.width);
+  EXPECT_EQ(static_cast<GLsizei>(13), cmd.height);
+  EXPECT_EQ(static_cast<GLenum>(14), cmd.format);
+  EXPECT_EQ(static_cast<GLenum>(15), cmd.type);
+  EXPECT_EQ(static_cast<uint32_t>(16), cmd.buffer_name_bucket_id);
+  EXPECT_EQ(static_cast<GLuint>(17), cmd.buffer_offset);
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
+TEST_F(GLES2FormatTest, ReleaseBufferSKYPEBucket) {
+  cmds::ReleaseBufferSKYPEBucket& cmd =
+      *GetBufferAs<cmds::ReleaseBufferSKYPEBucket>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<uint32_t>(11));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::ReleaseBufferSKYPEBucket::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<uint32_t>(11), cmd.name_bucket_id);
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
 #endif  // GPU_COMMAND_BUFFER_COMMON_GLES2_CMD_FORMAT_TEST_AUTOGEN_H_
diff --git a/gpu/command_buffer/common/gles2_cmd_ids_autogen.h b/gpu/command_buffer/common/gles2_cmd_ids_autogen.h
index 5d2242b00d54346db68bd2f146130bcbbc1a96eb..9b364ad77bee81426f50aaafb5815b60370d81d7 100644
--- a/gpu/command_buffer/common/gles2_cmd_ids_autogen.h
+++ b/gpu/command_buffer/common/gles2_cmd_ids_autogen.h
@@ -355,7 +355,9 @@
   OP(BlendFunciOES)                                            /* 596 */ \
   OP(BlendFuncSeparateiOES)                                    /* 597 */ \
   OP(ColorMaskiOES)                                            /* 598 */ \
-  OP(IsEnablediOES)                                            /* 599 */
+  OP(IsEnablediOES)                                            /* 599 */ \
+  OP(UpdateTextureSKYPEBucket)                                 /* 600 */ \
+  OP(ReleaseBufferSKYPEBucket)                                 /* 601 */
 
 enum CommandId {
   kOneBeforeStartPoint =
