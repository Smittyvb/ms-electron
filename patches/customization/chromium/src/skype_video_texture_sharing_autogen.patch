From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Milan Burda <miburda@microsoft.com>
Date: Thu, 9 Jul 2020 19:26:22 +0200
Subject: build: generated by gpu/command_buffer/build_gles2_cmd_buffer.py

Microsoft patch

diff --git a/gpu/GLES2/gl2chromium_autogen.h b/gpu/GLES2/gl2chromium_autogen.h
index 801cab337c7da3fd965e23532b8d3df6574226dc..b53e2f671872a9e036e28b9e583a39c685eee4d8 100644
--- a/gpu/GLES2/gl2chromium_autogen.h
+++ b/gpu/GLES2/gl2chromium_autogen.h
@@ -417,5 +417,7 @@
 #define glIsEnablediOES GLES2_GET_FUN(IsEnablediOES)
 #define glUpdateTextureSKYPE GLES2_GET_FUN(UpdateTextureSKYPE)
 #define glReleaseBufferSKYPE GLES2_GET_FUN(ReleaseBufferSKYPE)
+#define glCopyTextureSKYPE GLES2_GET_FUN(CopyTextureSKYPE)
+#define glReleaseTextureStreamSKYPE GLES2_GET_FUN(ReleaseTextureStreamSKYPE)
 
 #endif  // GPU_GLES2_GL2CHROMIUM_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_c_lib_autogen.h b/gpu/command_buffer/client/gles2_c_lib_autogen.h
index 4b9403f1b352856a262525ed5c736fc8cdcd4b63..b985f47c4b9b2335435a2f5afd57a8a5418ced41 100644
--- a/gpu/command_buffer/client/gles2_c_lib_autogen.h
+++ b/gpu/command_buffer/client/gles2_c_lib_autogen.h
@@ -1885,6 +1885,18 @@ void GL_APIENTRY GLES2UpdateTextureSKYPE(GLenum target,
 void GL_APIENTRY GLES2ReleaseBufferSKYPE(const char* name) {
   gles2::GetGLContext()->ReleaseBufferSKYPE(name);
 }
+void GL_APIENTRY GLES2CopyTextureSKYPE(const char* stream_id,
+                                       GLuint source_handle,
+                                       GLenum dest_target,
+                                       GLuint dest_id,
+                                       GLsizei width,
+                                       GLsizei height) {
+  gles2::GetGLContext()->CopyTextureSKYPE(stream_id, source_handle, dest_target,
+                                          dest_id, width, height);
+}
+void GL_APIENTRY GLES2ReleaseTextureStreamSKYPE(const char* stream_id) {
+  gles2::GetGLContext()->ReleaseTextureStreamSKYPE(stream_id);
+}
 
 namespace gles2 {
 
@@ -3373,6 +3385,14 @@ extern const NameToFunc g_gles2_function_table[] = {
         "glReleaseBufferSKYPE",
         reinterpret_cast<GLES2FunctionPointer>(glReleaseBufferSKYPE),
     },
+    {
+        "glCopyTextureSKYPE",
+        reinterpret_cast<GLES2FunctionPointer>(glCopyTextureSKYPE),
+    },
+    {
+        "glReleaseTextureStreamSKYPE",
+        reinterpret_cast<GLES2FunctionPointer>(glReleaseTextureStreamSKYPE),
+    },
     {
         nullptr,
         nullptr,
diff --git a/gpu/command_buffer/client/gles2_cmd_helper_autogen.h b/gpu/command_buffer/client/gles2_cmd_helper_autogen.h
index 766267a19eaa07900b0822ecae3f57b316979262..709c0f79198352fca1580b5740040d3adbf60d18 100644
--- a/gpu/command_buffer/client/gles2_cmd_helper_autogen.h
+++ b/gpu/command_buffer/client/gles2_cmd_helper_autogen.h
@@ -3518,4 +3518,26 @@ void ReleaseBufferSKYPEBucket(uint32_t name_bucket_id) {
   }
 }
 
+void CopyTextureSKYPEBucket(uint32_t stream_id_bucket_id,
+                            GLuint source_handle,
+                            GLenum dest_target,
+                            GLuint dest_id,
+                            GLsizei width,
+                            GLsizei height) {
+  gles2::cmds::CopyTextureSKYPEBucket* c =
+      GetCmdSpace<gles2::cmds::CopyTextureSKYPEBucket>();
+  if (c) {
+    c->Init(stream_id_bucket_id, source_handle, dest_target, dest_id, width,
+            height);
+  }
+}
+
+void ReleaseTextureStreamSKYPEBucket(uint32_t stream_id_bucket_id) {
+  gles2::cmds::ReleaseTextureStreamSKYPEBucket* c =
+      GetCmdSpace<gles2::cmds::ReleaseTextureStreamSKYPEBucket>();
+  if (c) {
+    c->Init(stream_id_bucket_id);
+  }
+}
+
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_CMD_HELPER_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_implementation_autogen.h b/gpu/command_buffer/client/gles2_implementation_autogen.h
index e2a1b9d3d2a1fce9e714cba94f95e4bddc88fea0..673022d72910522b41a958acb7721f562b2b399a 100644
--- a/gpu/command_buffer/client/gles2_implementation_autogen.h
+++ b/gpu/command_buffer/client/gles2_implementation_autogen.h
@@ -1329,4 +1329,13 @@ void UpdateTextureSKYPE(GLenum target,
 
 void ReleaseBufferSKYPE(const char* name) override;
 
+void CopyTextureSKYPE(const char* stream_id,
+                      GLuint source_handle,
+                      GLenum dest_target,
+                      GLuint dest_id,
+                      GLsizei width,
+                      GLsizei height) override;
+
+void ReleaseTextureStreamSKYPE(const char* stream_id) override;
+
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_IMPLEMENTATION_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_interface_autogen.h b/gpu/command_buffer/client/gles2_interface_autogen.h
index abbe17123c7647d30d64b9ea491879b25b6acddc..c62f2713c5a401cded899ec4356e6139f678da5f 100644
--- a/gpu/command_buffer/client/gles2_interface_autogen.h
+++ b/gpu/command_buffer/client/gles2_interface_autogen.h
@@ -994,4 +994,11 @@ virtual void UpdateTextureSKYPE(GLenum target,
                                 const char* buffer_name,
                                 GLuint buffer_offset) = 0;
 virtual void ReleaseBufferSKYPE(const char* name) = 0;
+virtual void CopyTextureSKYPE(const char* stream_id,
+                              GLuint source_handle,
+                              GLenum dest_target,
+                              GLuint dest_id,
+                              GLsizei width,
+                              GLsizei height) = 0;
+virtual void ReleaseTextureStreamSKYPE(const char* stream_id) = 0;
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_INTERFACE_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_interface_stub_autogen.h b/gpu/command_buffer/client/gles2_interface_stub_autogen.h
index c5ccdc9a06f8a21434da7f6ad4dab9c9295dcc94..f6c12a99013a651faae02c03fc26f5605dbd75b9 100644
--- a/gpu/command_buffer/client/gles2_interface_stub_autogen.h
+++ b/gpu/command_buffer/client/gles2_interface_stub_autogen.h
@@ -964,4 +964,11 @@ void UpdateTextureSKYPE(GLenum target,
                         const char* buffer_name,
                         GLuint buffer_offset) override;
 void ReleaseBufferSKYPE(const char* name) override;
+void CopyTextureSKYPE(const char* stream_id,
+                      GLuint source_handle,
+                      GLenum dest_target,
+                      GLuint dest_id,
+                      GLsizei width,
+                      GLsizei height) override;
+void ReleaseTextureStreamSKYPE(const char* stream_id) override;
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_INTERFACE_STUB_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h b/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
index 0baa6153a8b9fb9e9c69abe173dbfc5a6f34d5ec..b4b23b654a4914250099a81a60c50e6cdae4f3c5 100644
--- a/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
+++ b/gpu/command_buffer/client/gles2_interface_stub_impl_autogen.h
@@ -1286,4 +1286,12 @@ void GLES2InterfaceStub::UpdateTextureSKYPE(GLenum /* target */,
                                             const char* /* buffer_name */,
                                             GLuint /* buffer_offset */) {}
 void GLES2InterfaceStub::ReleaseBufferSKYPE(const char* /* name */) {}
+void GLES2InterfaceStub::CopyTextureSKYPE(const char* /* stream_id */,
+                                          GLuint /* source_handle */,
+                                          GLenum /* dest_target */,
+                                          GLuint /* dest_id */,
+                                          GLsizei /* width */,
+                                          GLsizei /* height */) {}
+void GLES2InterfaceStub::ReleaseTextureStreamSKYPE(
+    const char* /* stream_id */) {}
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_INTERFACE_STUB_IMPL_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_trace_implementation_autogen.h b/gpu/command_buffer/client/gles2_trace_implementation_autogen.h
index 2d3a0dd7b116b360a96eaee3ff02c83d8bf113c6..b22d7fb86d73291b63174a33c01b1106eb581888 100644
--- a/gpu/command_buffer/client/gles2_trace_implementation_autogen.h
+++ b/gpu/command_buffer/client/gles2_trace_implementation_autogen.h
@@ -964,4 +964,11 @@ void UpdateTextureSKYPE(GLenum target,
                         const char* buffer_name,
                         GLuint buffer_offset) override;
 void ReleaseBufferSKYPE(const char* name) override;
+void CopyTextureSKYPE(const char* stream_id,
+                      GLuint source_handle,
+                      GLenum dest_target,
+                      GLuint dest_id,
+                      GLsizei width,
+                      GLsizei height) override;
+void ReleaseTextureStreamSKYPE(const char* stream_id) override;
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_TRACE_IMPLEMENTATION_AUTOGEN_H_
diff --git a/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h b/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
index b0d33138727fbe5466dd7931660a79681bbc2a66..29a8e7a74bdc8a3408c49982586730fa7cf1f204 100644
--- a/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
+++ b/gpu/command_buffer/client/gles2_trace_implementation_impl_autogen.h
@@ -2727,4 +2727,21 @@ void GLES2TraceImplementation::ReleaseBufferSKYPE(const char* name) {
   gl_->ReleaseBufferSKYPE(name);
 }
 
+void GLES2TraceImplementation::CopyTextureSKYPE(const char* stream_id,
+                                                GLuint source_handle,
+                                                GLenum dest_target,
+                                                GLuint dest_id,
+                                                GLsizei width,
+                                                GLsizei height) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::CopyTextureSKYPE");
+  gl_->CopyTextureSKYPE(stream_id, source_handle, dest_target, dest_id, width,
+                        height);
+}
+
+void GLES2TraceImplementation::ReleaseTextureStreamSKYPE(
+    const char* stream_id) {
+  TRACE_EVENT_BINARY_EFFICIENT0("gpu", "GLES2Trace::ReleaseTextureStreamSKYPE");
+  gl_->ReleaseTextureStreamSKYPE(stream_id);
+}
+
 #endif  // GPU_COMMAND_BUFFER_CLIENT_GLES2_TRACE_IMPLEMENTATION_IMPL_AUTOGEN_H_
diff --git a/gpu/command_buffer/common/gles2_cmd_format_autogen.h b/gpu/command_buffer/common/gles2_cmd_format_autogen.h
index 29fed356f7a2c7910a334c8290646e18efebdc3d..915e6c4e501a8ed24525d888660b2b46114edfe5 100644
--- a/gpu/command_buffer/common/gles2_cmd_format_autogen.h
+++ b/gpu/command_buffer/common/gles2_cmd_format_autogen.h
@@ -17300,4 +17300,105 @@ static_assert(offsetof(ReleaseBufferSKYPEBucket, header) == 0,
 static_assert(offsetof(ReleaseBufferSKYPEBucket, name_bucket_id) == 4,
               "offset of ReleaseBufferSKYPEBucket name_bucket_id should be 4");
 
+struct CopyTextureSKYPEBucket {
+  typedef CopyTextureSKYPEBucket ValueType;
+  static const CommandId kCmdId = kCopyTextureSKYPEBucket;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(uint32_t _stream_id_bucket_id,
+            GLuint _source_handle,
+            GLenum _dest_target,
+            GLuint _dest_id,
+            GLsizei _width,
+            GLsizei _height) {
+    SetHeader();
+    stream_id_bucket_id = _stream_id_bucket_id;
+    source_handle = _source_handle;
+    dest_target = _dest_target;
+    dest_id = _dest_id;
+    width = _width;
+    height = _height;
+  }
+
+  void* Set(void* cmd,
+            uint32_t _stream_id_bucket_id,
+            GLuint _source_handle,
+            GLenum _dest_target,
+            GLuint _dest_id,
+            GLsizei _width,
+            GLsizei _height) {
+    static_cast<ValueType*>(cmd)->Init(_stream_id_bucket_id, _source_handle,
+                                       _dest_target, _dest_id, _width, _height);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  gpu::CommandHeader header;
+  uint32_t stream_id_bucket_id;
+  uint32_t source_handle;
+  uint32_t dest_target;
+  uint32_t dest_id;
+  int32_t width;
+  int32_t height;
+};
+
+static_assert(sizeof(CopyTextureSKYPEBucket) == 28,
+              "size of CopyTextureSKYPEBucket should be 28");
+static_assert(offsetof(CopyTextureSKYPEBucket, header) == 0,
+              "offset of CopyTextureSKYPEBucket header should be 0");
+static_assert(
+    offsetof(CopyTextureSKYPEBucket, stream_id_bucket_id) == 4,
+    "offset of CopyTextureSKYPEBucket stream_id_bucket_id should be 4");
+static_assert(offsetof(CopyTextureSKYPEBucket, source_handle) == 8,
+              "offset of CopyTextureSKYPEBucket source_handle should be 8");
+static_assert(offsetof(CopyTextureSKYPEBucket, dest_target) == 12,
+              "offset of CopyTextureSKYPEBucket dest_target should be 12");
+static_assert(offsetof(CopyTextureSKYPEBucket, dest_id) == 16,
+              "offset of CopyTextureSKYPEBucket dest_id should be 16");
+static_assert(offsetof(CopyTextureSKYPEBucket, width) == 20,
+              "offset of CopyTextureSKYPEBucket width should be 20");
+static_assert(offsetof(CopyTextureSKYPEBucket, height) == 24,
+              "offset of CopyTextureSKYPEBucket height should be 24");
+
+struct ReleaseTextureStreamSKYPEBucket {
+  typedef ReleaseTextureStreamSKYPEBucket ValueType;
+  static const CommandId kCmdId = kReleaseTextureStreamSKYPEBucket;
+  static const cmd::ArgFlags kArgFlags = cmd::kFixed;
+  static const uint8_t cmd_flags = CMD_FLAG_SET_TRACE_LEVEL(3);
+
+  static uint32_t ComputeSize() {
+    return static_cast<uint32_t>(sizeof(ValueType));  // NOLINT
+  }
+
+  void SetHeader() { header.SetCmd<ValueType>(); }
+
+  void Init(uint32_t _stream_id_bucket_id) {
+    SetHeader();
+    stream_id_bucket_id = _stream_id_bucket_id;
+  }
+
+  void* Set(void* cmd, uint32_t _stream_id_bucket_id) {
+    static_cast<ValueType*>(cmd)->Init(_stream_id_bucket_id);
+    return NextCmdAddress<ValueType>(cmd);
+  }
+
+  gpu::CommandHeader header;
+  uint32_t stream_id_bucket_id;
+};
+
+static_assert(sizeof(ReleaseTextureStreamSKYPEBucket) == 8,
+              "size of ReleaseTextureStreamSKYPEBucket should be 8");
+static_assert(offsetof(ReleaseTextureStreamSKYPEBucket, header) == 0,
+              "offset of ReleaseTextureStreamSKYPEBucket header should be 0");
+static_assert(offsetof(ReleaseTextureStreamSKYPEBucket, stream_id_bucket_id) ==
+                  4,
+              "offset of ReleaseTextureStreamSKYPEBucket stream_id_bucket_id "
+              "should be 4");
+
 #endif  // GPU_COMMAND_BUFFER_COMMON_GLES2_CMD_FORMAT_AUTOGEN_H_
diff --git a/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h b/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
index 568f2387319f82882a09264377a66399ab3dc2e3..d136cb769c231fa6a18ecd6f6c9b25e0084e2040 100644
--- a/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
+++ b/gpu/command_buffer/common/gles2_cmd_format_test_autogen.h
@@ -5716,4 +5716,35 @@ TEST_F(GLES2FormatTest, ReleaseBufferSKYPEBucket) {
   CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
 }
 
+TEST_F(GLES2FormatTest, CopyTextureSKYPEBucket) {
+  cmds::CopyTextureSKYPEBucket& cmd =
+      *GetBufferAs<cmds::CopyTextureSKYPEBucket>();
+  void* next_cmd =
+      cmd.Set(&cmd, static_cast<uint32_t>(11), static_cast<GLuint>(12),
+              static_cast<GLenum>(13), static_cast<GLuint>(14),
+              static_cast<GLsizei>(15), static_cast<GLsizei>(16));
+  EXPECT_EQ(static_cast<uint32_t>(cmds::CopyTextureSKYPEBucket::kCmdId),
+            cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<uint32_t>(11), cmd.stream_id_bucket_id);
+  EXPECT_EQ(static_cast<GLuint>(12), cmd.source_handle);
+  EXPECT_EQ(static_cast<GLenum>(13), cmd.dest_target);
+  EXPECT_EQ(static_cast<GLuint>(14), cmd.dest_id);
+  EXPECT_EQ(static_cast<GLsizei>(15), cmd.width);
+  EXPECT_EQ(static_cast<GLsizei>(16), cmd.height);
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
+TEST_F(GLES2FormatTest, ReleaseTextureStreamSKYPEBucket) {
+  cmds::ReleaseTextureStreamSKYPEBucket& cmd =
+      *GetBufferAs<cmds::ReleaseTextureStreamSKYPEBucket>();
+  void* next_cmd = cmd.Set(&cmd, static_cast<uint32_t>(11));
+  EXPECT_EQ(
+      static_cast<uint32_t>(cmds::ReleaseTextureStreamSKYPEBucket::kCmdId),
+      cmd.header.command);
+  EXPECT_EQ(sizeof(cmd), cmd.header.size * 4u);
+  EXPECT_EQ(static_cast<uint32_t>(11), cmd.stream_id_bucket_id);
+  CheckBytesWrittenMatchesExpectedSize(next_cmd, sizeof(cmd));
+}
+
 #endif  // GPU_COMMAND_BUFFER_COMMON_GLES2_CMD_FORMAT_TEST_AUTOGEN_H_
diff --git a/gpu/command_buffer/common/gles2_cmd_ids_autogen.h b/gpu/command_buffer/common/gles2_cmd_ids_autogen.h
index 9b364ad77bee81426f50aaafb5815b60370d81d7..322f493d533c77b33320b87096458884fe34d1cc 100644
--- a/gpu/command_buffer/common/gles2_cmd_ids_autogen.h
+++ b/gpu/command_buffer/common/gles2_cmd_ids_autogen.h
@@ -357,7 +357,9 @@
   OP(ColorMaskiOES)                                            /* 598 */ \
   OP(IsEnablediOES)                                            /* 599 */ \
   OP(UpdateTextureSKYPEBucket)                                 /* 600 */ \
-  OP(ReleaseBufferSKYPEBucket)                                 /* 601 */
+  OP(ReleaseBufferSKYPEBucket)                                 /* 601 */ \
+  OP(CopyTextureSKYPEBucket)                                   /* 602 */ \
+  OP(ReleaseTextureStreamSKYPEBucket)                          /* 603 */
 
 enum CommandId {
   kOneBeforeStartPoint =
